{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\n// Объявляем объект с ссылками на элементы страницы\nconst refs = {\n  datePicker: document.getElementById('datetime-picker'), // Поле для выбора даты\n  startBtn: document.querySelector('[data-start]'), // Кнопка \"Старт\"\n  days: document.querySelector('[data-days]'), // Поле для отображения дней\n  hours: document.querySelector('[data-hours]'), // Поле для отображения часов\n  minutes: document.querySelector('[data-minutes]'), // Поле для отображения минут\n  seconds: document.querySelector('[data-seconds]'), // Поле для отображения секунд\n};\n\nlet intervalId = null; // Идентификатор интервала для обновления таймера\n\n// Делаем кнопку \"Старт\" неактивной по умолчанию\nrefs.startBtn.disabled = true;\n\n// Настройки для календаря\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n\n  // Обработчик события закрытия календаря\n  onClose(selectedDates) {\n    const userSelectedDate = selectedDates[0]; // Выбранная пользователем дата\n\n    // Проверяем, выбрана ли дата в будущем\n    if (userSelectedDate > options.defaultDate) {\n      enableStartButton(); // Активируем кнопку \"Старт\"\n      startCountdown(userSelectedDate); // Запускаем таймер обратного отсчета\n    } else {\n      showErrorToast('Please choose a date in the future'); // Выводим сообщение об ошибке\n    }\n  },\n};\n\n// Инициализируем календарь\nflatpickr(refs.datePicker, options);\n\n// Функция для активации кнопки \"Старт\"\nfunction enableStartButton() {\n  refs.startBtn.disabled = false; // Делаем кнопку активной\n  // Добавляем обработчик события на кнопку \"Старт\"\n  refs.startBtn.addEventListener('click', handleStartButtonClick);\n}\n\n// Обработчик события для нажатия на кнопку \"Старт\"\nfunction handleStartButtonClick() {\n  startCountdown(refs.datePicker._flatpickr.selectedDates[0]); // Запускаем таймер\n  refs.startBtn.disabled = true; // Делаем кнопку неактивной\n  refs.datePicker.disabled = true; // Делаем поле выбора даты неактивным\n}\n\n// Функция для запуска таймера обратного отсчета\nfunction startCountdown(targetDate) {\n  intervalId = setInterval(() => {\n    const deltaTime = targetDate - Date.now(); // Вычисляем разницу во времени\n    const time = convertMs(deltaTime); // Конвертируем разницу в формат дней, часов, минут и секунд\n    updateClockFace(time); // Обновляем отображение времени на странице\n\n    // Проверяем, закончился ли отсчет времени\n    if (deltaTime < 1000) {\n      clearInterval(intervalId); // Останавливаем таймер\n    }\n  }, 1000);\n}\n\n// Функция для обновления отображения времени на странице\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n  refs.days.textContent = addLeadingZero(days); // Обновляем количество дней\n  refs.hours.textContent = addLeadingZero(hours); // Обновляем количество часов\n  refs.minutes.textContent = addLeadingZero(minutes); // Обновляем количество минут\n  refs.seconds.textContent = addLeadingZero(seconds); // Обновляем количество секунд\n}\n\n// Функция для добавления ведущего нуля к числам, если они меньше 10\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\n// Функция для конвертации времени в миллисекундах в формат дней, часов, минут и секунд\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n// Функция для вывода сообщения об ошибке\nfunction showErrorToast(message) {\n  iziToast.error({\n    title: 'Error',\n    message,\n    position: 'topRight',\n  });\n}\n"],"names":["refs","intervalId","options","selectedDates","userSelectedDate","enableStartButton","startCountdown","showErrorToast","flatpickr","handleStartButtonClick","targetDate","deltaTime","time","convertMs","updateClockFace","days","hours","minutes","seconds","addLeadingZero","value","ms","message","iziToast"],"mappings":"0IAMA,MAAMA,EAAO,CACX,WAAY,SAAS,eAAe,iBAAiB,EACrD,SAAU,SAAS,cAAc,cAAc,EAC/C,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CAClD,EAEA,IAAIC,EAAa,KAGjBD,EAAK,SAAS,SAAW,GAGzB,MAAME,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAGjB,QAAQC,EAAe,CACrB,MAAMC,EAAmBD,EAAc,CAAC,EAGpCC,EAAmBF,EAAQ,aAC7BG,IACAC,EAAeF,CAAgB,GAE/BG,EAAe,oCAAoC,CAEtD,CACH,EAGAC,EAAUR,EAAK,WAAYE,CAAO,EAGlC,SAASG,GAAoB,CAC3BL,EAAK,SAAS,SAAW,GAEzBA,EAAK,SAAS,iBAAiB,QAASS,CAAsB,CAChE,CAGA,SAASA,GAAyB,CAChCH,EAAeN,EAAK,WAAW,WAAW,cAAc,CAAC,CAAC,EAC1DA,EAAK,SAAS,SAAW,GACzBA,EAAK,WAAW,SAAW,EAC7B,CAGA,SAASM,EAAeI,EAAY,CAClCT,EAAa,YAAY,IAAM,CAC7B,MAAMU,EAAYD,EAAa,KAAK,IAAG,EACjCE,EAAOC,EAAUF,CAAS,EAChCG,EAAgBF,CAAI,EAGhBD,EAAY,KACd,cAAcV,CAAU,CAE3B,EAAE,GAAI,CACT,CAGA,SAASa,EAAgB,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC1DlB,EAAK,KAAK,YAAcmB,EAAeJ,CAAI,EAC3Cf,EAAK,MAAM,YAAcmB,EAAeH,CAAK,EAC7ChB,EAAK,QAAQ,YAAcmB,EAAeF,CAAO,EACjDjB,EAAK,QAAQ,YAAcmB,EAAeD,CAAO,CACnD,CAGA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAGA,SAASP,EAAUQ,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGA,SAASX,EAAee,EAAS,CAC/BC,EAAS,MAAM,CACb,MAAO,QACP,QAAAD,EACA,SAAU,UACd,CAAG,CACH"}